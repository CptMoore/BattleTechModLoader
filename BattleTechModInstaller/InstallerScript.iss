; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
; copied from https://github.com/Qwiso/QModManager/blob/master/Installer/QModsInstallerScript.iss

#define MyAppName "BattleTechMod Tools With Mods"
#define MyAppVersion "0.8.9"
#define MySetupName "BTMToolsSetup-0.8.9"
#define MyAppPublisher "CptMoore"
#define MyAppURL "https://github.com/CptMoore/BattleTechModTools"
#define MyParentApp "BattleTech"
#define MyParentAppExe "BattleTech.exe"
#define MyParentAppSteamDirName "BattleTech"
; please adjust the code to your app

[Setup]
AppId={{1765276C-3F2D-49BE-BB05-926C0BA2C863}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetDefaultDir}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputDir=.
OutputBaseFilename={#MySetupName}
SetupIconFile=Icon.ico
Compression=lzma
SolidCompression=yes
WizardImageFile=WizardImage.bmp
WizardSmallImageFile=WizardSmallImage.bmp
DisableWelcomePage=no
DisableDirPage=no
DirExistsWarning=no
UsePreviousAppDir=no
UninstallDisplayIcon={app}\Mods\BTMTools\Icon.ico
UsePreviousTasks=yes

[Messages]
ExitSetupMessage=Setup is not complete. If you exit now, {#MyAppName} will not be installed.%n%nExit Setup?
SelectDirLabel3=Please select your {#MyParentApp} install folder.
SelectDirBrowseLabel=If this is correct, click Next. If you need to select a different {#MyParentApp} install folder, click Browse.
WizardSelectDir=Select {#MyParentApp} Install Location

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "basetools"; Description: "Install BTML, ModTek and DynModLib (required)"; GroupDescription: "Tasks"
Name: "modsicon"; Description: "Add desktop shortcut to the mods folder (recommended)"; GroupDescription: "Tasks"
Name: "SpeedMod"; Description: "Install SpeedMod - Speed up key is a toggle and speed up is constant"; GroupDescription: "Tasks"; Flags: unchecked
Name: "HardpointFixMod"; Description: "Install HardpointFixMod - Fixes issues with mech hardpoints"; GroupDescription: "Tasks"; Flags: unchecked
Name: "pansar"; Description: "Install pansar - Enforces TT rules for armor"; GroupDescription: "Tasks"; Flags: unchecked
Name: "StartingMercsMod"; Description: "Install StartingMercsMod - Randomizes starting mercs"; GroupDescription: "Tasks"; Flags: unchecked
; obsolete tasks
; Name: "StatsFixMod"; Description: "Install StatsFixMod - Fixes issues with stats calculations (alpha)"; GroupDescription: "Tasks"; Flags: unchecked
; Name: "desktopicon"; Description: "Add desktop shortcut to the auto-inject launcher"; GroupDescription: "{cm:AdditionalIcons}"

[UninstallDelete]
; delete cache
; modtek and btml
Type: files; Name: "{app}\Mods\*.log"
Type: filesandordirs; Name: "{app}\Mods\.modtek\Cache"
; inclded mods
Type: files; Name: "{app}\Mods\*\log.txt"
Type: files; Name: "{app}\Mods\SpeedMod\*.dll"
Type: files; Name: "{app}\Mods\HardpointFixMod\*.dll"
Type: files; Name: "{app}\Mods\StatsFixMod\*.dll"
Type: files; Name: "{app}\Mods\StartingMercsMod\*.dll"
Type: files; Name: "{app}\Mods\pansar\*.dll"

[InstallDelete]
; delete cache
; modtek and btml
Type: files; Name: "{app}\Mods\*.log"
Type: filesandordirs; Name: "{app}\Mods\.modtek\Cache"
; inclded mods
Type: files; Name: "{app}\Mods\*\log.txt"
Type: files; Name: "{app}\Mods\SpeedMod\*.dll"
Type: files; Name: "{app}\Mods\HardpointFixMod\*.dll"
Type: files; Name: "{app}\Mods\StatsFixMod\*.dll"
Type: files; Name: "{app}\Mods\StartingMercsMod\*.dll"
Type: files; Name: "{app}\Mods\pansar\*.dll"

[Files]
Source: "Icon.ico"; DestDir: "{app}\Mods\BTMTools\"; Flags: ignoreversion; Tasks: modsicon
Source: "Readme.txt"; DestDir: "{app}\Mods\BTMTools\"; Flags: ignoreversion; Tasks: basetools
Source: "..\BattleTechModLauncher\bin\Release\BattleTechModLauncher.exe"; DestDir: "{app}\"; Flags: ignoreversion; Tasks: basetools
Source: "binaries\0Harmony.dll"; DestDir: "{app}\BattleTech_Data\Managed\"; Flags: ignoreversion; Tasks: basetools
Source: "binaries\BattleTechModLoader.dll"; DestDir: "{app}\BattleTech_Data\Managed\"; Flags: ignoreversion; Tasks: basetools
Source: "binaries\BattleTechModLoaderInjector.exe"; DestDir: "{app}\BattleTech_Data\Managed\"; Flags: ignoreversion; Tasks: basetools
Source: "..\DynModLib\source\bin\Release\DynModLib.dll"; DestDir: "{app}\Mods\DynModLib\"; Flags: ignoreversion; Tasks: basetools
Source: "..\DynModLib\Mono.CSharp.dll"; DestDir: "{app}\Mods\DynModLib\"; Flags: ignoreversion; Tasks: basetools
Source: "..\DynModLib\mod.json"; DestDir: "{app}\Mods\DynModLib\"; Flags: ignoreversion; Tasks: basetools
Source: "binaries\ModTek.dll"; DestDir: "{app}\Mods\"; Flags: ignoreversion; Tasks: basetools
Source: "mods\SpeedMod\*"; DestDir: "{app}\Mods\SpeedMod\"; Excludes: "Settings.json"; Flags: ignoreversion recursesubdirs; Tasks: SpeedMod
Source: "mods\SpeedMod\Settings.json"; DestDir: "{app}\Mods\SpeedMod\"; Flags: ignoreversion onlyifdoesntexist uninsneveruninstall; Tasks: SpeedMod
Source: "mods\HardpointFixMod\*"; DestDir: "{app}\Mods\HardpointFixMod\"; Excludes: "Settings.json"; Flags: ignoreversion recursesubdirs; Tasks: HardpointFixMod
Source: "mods\HardpointFixMod\Settings.json"; DestDir: "{app}\Mods\HardpointFixMod\"; Flags: ignoreversion onlyifdoesntexist uninsneveruninstall; Tasks: HardpointFixMod
Source: "mods\StartingMercsMod\*"; DestDir: "{app}\Mods\StartingMercsMod\"; Excludes: "Settings.json"; Flags: ignoreversion recursesubdirs; Tasks: StartingMercsMod
Source: "mods\StartingMercsMod\Settings.json"; DestDir: "{app}\Mods\StartingMercsMod\"; Flags: ignoreversion onlyifdoesntexist uninsneveruninstall; Tasks: StartingMercsMod
Source: "mods\pansar\*"; DestDir: "{app}\Mods\pansar\"; Flags: ignoreversion recursesubdirs; Tasks: pansar

[Icons]
Name: "{userdesktop}\BattleTech Mods"; Filename: "{app}\Mods\"; IconFilename: "{app}\Mods\BTMTools\Icon.ico"; Tasks: modsicon
Name: "{app}\Mods\BTMTools\Uninstall BTMTools"; Filename: "{uninstallexe}"; Tasks: modsicon
Name: "{app}\Mods\Loader Enable"; Filename: "{app}\BattleTech_Data\Managed\BattleTechModLoaderInjector.exe"
Name: "{app}\Mods\Loader Disable"; Filename: "{app}\BattleTech_Data\Managed\BattleTechModLoaderInjector.exe"; Parameters: "/restore";
Name: "{app}\Mods\Launcher with AutoEnabler"; Filename: "{app}\BattleTechModLauncher.exe"
Name: "{app}\Mods\BTMTools\Tool - ModTek Releases"; Filename: "https://github.com/Mpstark/ModTek/releases"
Name: "{app}\Mods\BTMTools\Tool - BattleTechModLoader Releases"; Filename: "https://github.com/Mpstark/BattleTechModLoader/releases"
Name: "{app}\Mods\BTMTools\Tool - DynModLib Releases"; Filename: "https://github.com/CptMoore/DynModLib/releases"
Name: "{app}\Mods\BTMTools\Tool - BattleTechModTools Releases"; Filename: "https://github.com/CptMoore/BattleTechModTools/releases"
Name: "{app}\Mods\BTMTools\Mods - reddit BattleTechMods"; Filename: "https://www.reddit.com/r/BattleTechMods/"
Name: "{app}\Mods\BTMTools\Mods - Nexus Mods Battletech"; Filename: "https://www.nexusmods.com/battletech/"
; obsolete icons
; Name: "{userdesktop}\BTMod Launcher"; Filename: "{app}\BattleTechModLauncher.exe"; Tasks: desktopicon

[Run]
Filename: "{app}\BattleTech_Data\Managed\BattleTechModLoaderInjector.exe"; Parameters: "/nokeypress"

[UninstallRun]
Filename: "{app}\BattleTech_Data\Managed\BattleTechModLoaderInjector.exe"; Parameters: "/restore /nokeypress"

[Code]

// detect gog or steam installation
function GetDefaultDir(def: string): string;
var
I : Integer;
P : Integer;
steamInstallPath : string;
gameInstallPath : string;
configFile : string;
fileLines: TArrayOfString;
begin
	steamInstallPath := 'not found';
	if RegQueryStringValue( HKEY_LOCAL_MACHINE, 'SOFTWARE\WOW6432Node\Valve\Steam', 'InstallPath', steamInstallPath ) then
	begin
	end;

	if FileExists(steamInstallPath + '\steamapps\common\{#MyParentAppSteamDirName}\{#MyParentAppExe}') then
	begin
		Result := steamInstallPath + '\steamapps\common\{#MyParentAppSteamDirName}';
		Exit;
	end
	else
	begin
		configFile := steamInstallPath + '\config\config.vdf';
		if FileExists(configFile) then
		begin
			if LoadStringsFromFile(configFile, FileLines) then
			begin
				for I := 0 to GetArrayLength(FileLines) - 1 do
				begin
					P := Pos('BaseInstallFolder_', FileLines[I]);
					if P > 0 then
					begin
						steamInstallPath := Copy(FileLines[I], P + 23, Length(FileLines[i]) - P - 23);
						if FileExists(steamInstallPath + '\steamapps\common\{#MyParentAppSteamDirName}\{#MyParentAppExe}') then
						begin
							Result := steamInstallPath + '\steamapps\common\{#MyParentAppSteamDirName}';
							Exit;
						end;
					end;
				end;
			end;
		end;
  end
  
  gameInstallPath := 'not found'
  if RegQueryStringValue( HKEY_LOCAL_MACHINE, 'SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\1482783682_is1', 'InstallLocation', gameInstallPath ) then
  begin
    Result := gameInstallPath
    Exit;
  end;
	
	Result := 'not found';
end;


 // ask for deleting all mods
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  case CurUninstallStep of
    usPostUninstall:
      begin
        if SuppressibleMsgBox('Remove the Mods folder? (removes all mods and their settings)', mbConfirmation, MB_YESNO or MB_DEFBUTTON2, IDNO)= IDYES then
          begin
             DelTree(ExpandConstant('{app}\Mods'), True, True, True);
          end
      end;
  end;
end;

// https://stackoverflow.com/questions/2000296/inno-setup-how-to-automatically-uninstall-previous-installed-version
// we want to ingore version, as we also want to be able to install older versions over preview versions

function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;
